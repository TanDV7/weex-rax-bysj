'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _rax = require('rax');

var _universalEnv = require('universal-env');

var _raxText = require('rax-text');

var _raxText2 = _interopRequireDefault(_raxText);

var _raxTouchable = require('rax-touchable');

var _raxTouchable2 = _interopRequireDefault(_raxTouchable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Button = function (_Component) {
  _inherits(Button, _Component);

  function Button() {
    _classCallCheck(this, Button);

    return _possibleConstructorReturn(this, (Button.__proto__ || Object.getPrototypeOf(Button)).apply(this, arguments));
  }

  _createClass(Button, [{
    key: 'render',
    value: function render() {
      var props = this.props;
      var buttonStyles = [styles.button, props.style];
      var textStyles = [styles.text];

      if (props.color) {
        textStyles.push({ color: props.color });
      }

      if (props.disabled) {
        buttonStyles.push(styles.buttonDisabled);
        textStyles.push(styles.textDisabled);
      }

      var content = props.children || props.title;
      if (typeof content === 'string') {
        content = (0, _rax.createElement)(
          _raxText2.default,
          { style: textStyles },
          content
        );
      }

      return (0, _rax.createElement)(
        _raxTouchable2.default,
        _extends({}, props, { style: buttonStyles }),
        content
      );
    }
  }]);

  return Button;
}(_rax.Component);

var styles = {
  button: {},
  text: {
    color: '#0C42FD',
    textAlign: 'center',
    padding: 16,
    fontSize: 36
  },
  buttonDisabled: {},
  textDisabled: {
    color: '#cdcdcd'
  }
};

exports.default = Button;
module.exports = exports['default'];